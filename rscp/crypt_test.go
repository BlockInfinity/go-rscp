package rscp

import (
	"testing"

	"github.com/go-test/deep"
)

func TestCreateAESKey(t *testing.T) {
	type args struct {
		key string
	}
	tests := []struct {
		name string
		args args
		want [keySize]byte
	}{
		{"testkey 1",
			args{"testkey1"},
			Key{0x74, 0x65, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x31, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
		{"testkey 2",
			args{"this is a test key"},
			Key{0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x65, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := CreateAESKey(tt.args.key)
			if diff := deep.Equal(got, tt.want); diff != nil {
				t.Errorf("CreateAESKey() = %v, want %v\n%s", got, tt.want, diff)
			}
		})
	}
}

func TestNewIV(t *testing.T) {
	tests := []struct {
		name string
		want IV
	}{
		{"new iv",
			IV{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := NewIV()
			if diff := deep.Equal(got, tt.want); diff != nil {
				t.Errorf("NewIV() = %v, want %v\n%s", got, tt.want, diff)
			}
		})
	}
}
