// Code generated by "enumer -type=DataType -json"; DO NOT EDIT.

//
package rscp

import (
	"encoding/json"
	"fmt"
)

const (
	_DataTypeName_0 = "NoneBoolChar8UChar8Int16UInt16Int32Uint32Int64Uint64Float32Double64BitfieldCStringContainerTimestampByteArray"
	_DataTypeName_1 = "Error"
)

var (
	_DataTypeIndex_0 = [...]uint8{0, 4, 8, 13, 19, 24, 30, 35, 41, 46, 52, 59, 67, 75, 82, 91, 100, 109}
	_DataTypeIndex_1 = [...]uint8{0, 5}
)

func (i DataType) String() string {
	switch {
	case 0 <= i && i <= 16:
		return _DataTypeName_0[_DataTypeIndex_0[i]:_DataTypeIndex_0[i+1]]
	case i == 255:
		return _DataTypeName_1
	default:
		return fmt.Sprintf("DataType(%d)", i)
	}
}

var _DataTypeValues = []DataType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255}

var _DataTypeNameToValueMap = map[string]DataType{
	_DataTypeName_0[0:4]:     0,
	_DataTypeName_0[4:8]:     1,
	_DataTypeName_0[8:13]:    2,
	_DataTypeName_0[13:19]:   3,
	_DataTypeName_0[19:24]:   4,
	_DataTypeName_0[24:30]:   5,
	_DataTypeName_0[30:35]:   6,
	_DataTypeName_0[35:41]:   7,
	_DataTypeName_0[41:46]:   8,
	_DataTypeName_0[46:52]:   9,
	_DataTypeName_0[52:59]:   10,
	_DataTypeName_0[59:67]:   11,
	_DataTypeName_0[67:75]:   12,
	_DataTypeName_0[75:82]:   13,
	_DataTypeName_0[82:91]:   14,
	_DataTypeName_0[91:100]:  15,
	_DataTypeName_0[100:109]: 16,
	_DataTypeName_1[0:5]:     255,
}

// DataTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DataTypeString(s string) (DataType, error) {
	if val, ok := _DataTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DataType values", s)
}

// DataTypeValues returns all values of the enum
func DataTypeValues() []DataType {
	return _DataTypeValues
}

// IsADataType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DataType) IsADataType() bool {
	for _, v := range _DataTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DataType
func (i DataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DataType
func (i *DataType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DataType should be a string, got %s", data)
	}

	var err error
	*i, err = DataTypeString(s)
	return err
}
